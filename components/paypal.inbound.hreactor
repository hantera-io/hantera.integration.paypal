export createPayment(currencyCode: text) =>
   let paymentId = newid
   from messageActor (
     'payment'
     $'{paymentId}'
     [{
       type = 'create'
       body = {
         currencyCode = currencyCode
         providerKey = 'stripe'
       }
     }]
   ) match
     (err: Error) |> err
     (result) |> result

let purchaseUnit: {
  reference_id: text
  amount: {
    currency_code: text
    value: text
    breakdown: value
  }
  custom_id: text
}

let paypalOrder: {
  update_time: text
  create_time: text
  purchase_units: [purchaseUnit]
}

let paypalCapture: {
  amount: {
    value: text
  }
  custom_id: text
  id: text
}

let addAuthorization(
  order: paypalOrder
) =>
  let pu = order.purchase_units first
  from pu match
    purchaseUnit |> messageActor(
      'payment'
      $'{pu.custom_id}'
      [{
        type = 'applyCommands'
        body = {
          commands = [{
            type = 'createAuthorization'
            authorizationNumber = $'{pu.reference_id}'
            amount = pu.amount.value
          }]
        }
      }]
    )
    |> 'Bad Request: No purchase unit found'

let addCharge(
  capture: paypalCapture
) =>
  let paymentQuery =
    query payments(paymentId)
    filter $'paymentId == {capture.custom_id}'
    navigate authorizations(authorizationNumber)
  let authorizationNumber = paymentQuery match
    QueryError |> $'Error finding payment {capture.custom_id}'
    |>
      paymentQuery
      select r => r.authorizations select a => a.authorizationNumber
      flatten first
  from messageActor(
    'payment'
    $'{capture.custom_id}'
    [{
      type = 'charge'
      body = {
        amount = capture.amount.value
        authorizationNumber = authorizationNumber
        transactionReference = capture.id
      }
    }]
  )

export webhook(
  id: text
  create_time: text
  resource_type: text
  event_version: text
  event_type: text
  summary: text
  resource: value
) =>
  from event_type match
    'CHECKOUT.ORDER.APPROVED' |> resource_type match
      'checkout-order' |> resource match
        paypalOrder |> addAuthorization(resource)
        |> 'Bad Request: Resource format doesn''t match expected format for PayPal Checkout Order'
      |> $'Bad Request: Resource type {resource_type} doesn''t match event type CHECKOUT.ORDER.APPROVED'
    'PAYMENT.CAPTURE.COMPLETED' |> resource_type match
      'capture' |> resource match
        paypalCapture |> addCharge(resource)
        |> 'Bad Request: Resource format doesn''t match expected format for PayPal Capture'
      |> $'Bad Request: Resource type {resource_type} doesn''t match event type PAYMENT.CAPTURE.COMPLETED'
    |> $'Not supported event type {event_type}'